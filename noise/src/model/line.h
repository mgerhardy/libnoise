// line.h
//
// Copyright (C) 2003, 2004 by Jason Bevins    
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
// License (COPYING.txt) for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The developer's email is zigjas@greymartinzig.com (for great email, take
// off every 'zig'.)
//

#ifndef NOISE_MODEL_LINE_H
#define NOISE_MODEL_LINE_H

#include <assert.h>
#include <math.h>
#include <stdlib.h>
#include "../module/modulebase.h"

namespace noise
{

  namespace model {

    /// @addtogroup libnoise
    /// @{

    /// @addtogroup models
    /// @{

    /// Model that defines displacement of a line.
    ///
    /// @image html modelline.png
    ///
    /// Using a noise module, this class returns values that lie along a
    /// line, which could be used as displacements.
    ///
    /// This class is useful for creating:
    ///  - roads and rivers
    ///  - disaffected college students
    ///
    /// To return a noise value from a point on the line, pass a value
    /// between 0.0 and 1.0 to the GetValue() method.
    ///
    class Line
    {
  
      public:
  
        /// Constructor.
        Line ();
  
        /// Returns the noise module used to generate the values on the surface
        /// of the line.
        ///
        /// @returns A reference to the noise module.
        ///
        /// @pre A noise module was passed to the SetModule() method.
        const module::Module& GetModule () const
        {
          assert (m_pModule != NULL);
          return *m_pModule;
        }
  
        /// Returns the noise value at the given position on the line.
        ///
        /// @param p   The distance along the line segment (0..1.0).
        ///
        /// @returns The noise value.
        ///
        /// @pre A noise module was passed to the SetModule() method and
        ///      the start and end points of the line segment specified.
        ///
        /// The noise value is generated by the module passed to the
        /// SetModule() method.  The value may be attenuated (moved
        /// toward 0) as p approaches either end of the line segment;
        /// this is the default behavior.
        ///
        /// If the value is attenuated, the function will return
        /// 4*p*(1-p)*m_pModule->getValue() -- p*(1-p) will always be
        /// in [0..0.25] when p in [0..1.0], so multiplying by four
        /// will return the value to the normal (-1.0..1.0) range.
        ///
        /// If the value is not to be attenuated, p can safely range
        /// outside [0..1.0]; the value will be extrapolated along the
        /// line the segment is a part of.
        ///
        double GetValue (double p) const;
  
        /// Sets the noise module used to generate the values on the
        /// line.
        ///
        /// @param module The noise module.
        ///
        /// The noise module must exist for the lifetime of this object, unless
        /// you pass a new module to this method.
        void SetModule (const module::Module& module)
        {
          m_pModule = &module;
        }
  
        /// Sets the position (x, y, z) of the start of the line segment
        /// to choose values along.
        ///
        /// @param x x-value of start position.
        /// @param y y-value of start position.
        /// @param z z-value of start position.
        void SetStartPoint( double x, double y, double z)
        {
          m_x0 = x;
          m_y0 = y;
          m_z0 = z;
        }
  
        /// Sets the position (x, y, z) of the end of the line segment
        /// to choose values along.
        ///
        /// @param x x-value of end position.
        /// @param y y-value of end position.
        /// @param z z-value of end position.
        void SetEndPoint( double x, double y, double z)
        {
          m_x1 = x;
          m_y1 = y;
          m_z1 = z;
        }
  
        /// Returns a flag indicating whether the value is to be
        /// attenuated (moved toward 0) as the ends of the line segment
        /// are approached.
        ///
        /// @returns true if the value is to be attenuated.
        bool GetAttenuate() const
        {
          return m_attenuate;
        }
  
        /// Sets a flag indicating that the value is to be attenuated
        /// (moved toward 0) as the ends of the line segment are
        /// approached.
        ///
        /// @param att true if the value is to be attenuated.
        void SetAttenuate( bool att)
        {
          m_attenuate = att;
        }
  
      private:
  
        /// A pointer to the module used to generate the noise values.
        const module::Module* m_pModule;
  
        double m_x0;
        double m_y0;
        double m_z0;
        double m_x1;
        double m_y1;
        double m_z1;
  
        bool   m_attenuate;
    };
  
    /// @}
  
    /// @}
  
  }
}
  
#endif
