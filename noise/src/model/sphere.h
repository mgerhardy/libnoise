// sphere.h
//
// Copyright (C) 2003, 2004 by Jason Bevins    
//
// This library is free software; you can redistribute it and/or modify it
// under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation; either version 2.1 of the License, or (at
// your option) any later version.
//
// This library is distributed in the hope that it will be useful, but WITHOUT
// ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
// FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public
// License (COPYING.txt) for more details.
//
// You should have received a copy of the GNU Lesser General Public License
// along with this library; if not, write to the Free Software Foundation,
// Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
// The developer's email is zigjas@greymartinzig.com (for great email, take
// off every 'zig'.)
//

#ifndef NOISE_MODEL_SPHERE_H
#define NOISE_MODEL_SPHERE_H

#include <assert.h>
#include "../module/modulebase.h"

namespace noise
{

  namespace model
  {

    /// @addtogroup libnoise
    /// @{

    /// @addtogroup models
    /// @{

    /// Model that defines the surface of a sphere.
    ///
    /// @image html modelsphere.png
    ///
    /// Using a noise module, this class returns values that lie on the
    /// surface of a sphere.
    ///
    /// This class is useful for creating:
    /// - heightmaps for planets, and
    /// - procedural textures that can be seamlessly mapped onto a sphere.
    ///
    /// To return a noise value from a point on the sphere, pass a latitude
    /// and longitude to the GetValue() method.
    ///
    /// The sphere has a radius of @b 1.0 unit and is centered on the point
    /// ( @b 0.0, @b 0.0, @b 0.0 ).
    class Sphere
    {

      public:

        /// Constructor.
        Sphere ();

        /// Returns the noise module used to generate the values on the
        /// surface of the sphere.
        ///
        /// @returns A reference to the noise module.
        ///
        /// @pre A noise module was passed to the SetModule() method.
        const module::Module& GetModule () const
        {
          assert (m_pModule != NULL);
          return *m_pModule;
        }

        /// Returns the noise value at the given position on the sphere.
        ///
        /// @param lat The latitude, in degrees.
        /// @param lon The longitude, in degrees.
        ///
        /// @returns The noise value.
        ///
        /// @pre A noise module was passed to the SetModule() method.
        ///
        /// The noise value is generated by the module passed to the
        /// SetModule() method.
        ///
        /// Use negative latitude values for points on the southern
        /// hemisphere.
        ///
        /// Use negative longitude values for points on the western
        /// hemisphere.
        double GetValue (double lat, double lon) const;

        /// Sets the noise module used to generate the values on surface of
        /// the sphere.
        ///
        /// @param module The noise module.
        ///
        /// The noise module must exist for the lifetime of this object, until
        /// you pass a new module to this method.
        void SetModule (const module::Module& module)
        {
          m_pModule = &module;
        }

      private:

        /// A pointer to the module used to generate the noise values.
        const module::Module* m_pModule;

    };

    /// @}

    /// @}

  }

}

#endif
